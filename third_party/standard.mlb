*tst/1
    move    $1,$1
*clr/1
    sub $1,$1
*jmp/1
    push    $1
    rti $1
*jsrr/1
    push    $1
    crc
*shl/1
    addc    $1,$1

# STRUCTURED PROGRAMMING PACKAGE

# more conditions
*banything/1
    br $1

# regularise branch names w.r.t. negation
*bnanything/2
        #nop
*bngt/2
    ble $1:$2
*bnge/2
    blt $1:$2
*bneq/2
    bne $1:$2
*bnne/2
    beq $1:$2
*bnlt/2
    bge $1:$2
*bnle/2
    bgt $1:$2
*bnhi/2
        bls $1:$2
*bnhs/2
        blo $1:$2
*bncs/2
    bcc $1:$2
*bnlo/2
        bhs $1:$2
*bnls/2
        bhi $1:$2
*bncc/2
    bcs $1:$2
*bnmi/2
    bpl $1:$2
*bnpl/2
    bmi $1:$2
*bnfalse/2
        br      $1:$2
*bntrue/2
        # nop   $1, but is not worth allocating space for
*bnvs/2
        bvc $1:$2
*bnvc/2
    bvs $1:$2
*bnz/2
    bne $1:$2
*bnnz/2
    beq $1:$2
*bnz/1
    bne $1
######################### CONDITIONAL STATEMENT
#### Nesting control
*start_level/0
    2mpush  _error'     # prevention of interference for save/restore
*end_level/0
    2mpop   "incorrect nesting",__error
*restart_level/0
    end_level
    start_level
####

*if/0
    mpush   __else_'    # initial value of current "else"
        mpush   _'      # the if's id
    start_level
    4mpush   __if'
    lchk __guard__if':"loop incorrectly enclosed in 'if'"

*is/1
    mread   "'if' missing before 'is'",id,curElse
    bn$1    ?curElse,   "'fi' instruction missing"
    restart_level
    4mpop  isguard
__guard?isguard:
    4mpush  __if'
    lchk __guard__if':"loop incorrectly enclosed in 'if'"
*is/2
    connective_$2   $1
    restart_level
    4mpop  isguard
__guard?isguard:
    4mpush  __if'
    lchk __guard__if':"loop incorrectly enclosed in 'if'"

*connective_and/1
    mread   "'if' missing before 'is'",id,curElse
    bn$1    ?curElse,   "'fi' instruction missing"

*connective_or/1
    mpop    "'if' missing before 'is'",id,curElse
    b$1 __then?id:      "'then' instruction missing"

?curElse:                   # the above "and" group exits here
    mpush   __else_',?id    # renew current "else", re-push id onto stack

*then/0
    mread   "'if' missing before 'then'",id
__then?id:
    restart_level

*else/0
    mpop    "'if' missing before 'else'",id,curElse
    mpush   __fi?id,?id
    br  __fi?id:        "'fi' instruction missing"
?curElse:
    restart_level

*fi/0
    mpop    "'if' missing before 'fi'",id,curElse
?curElse:
    end_level
    4mpop   "incorrect nesting of an if",ifguard
__guard?ifguard:
######################### WHILE AND UNTIL LOOPS
*while/0
    4mpush __while'
    1mpush  _'
__beglp_':
    start_level
lchk __while':"incorrect 'while' loop nesting"

*stays/1
    1mread  "missing 'while' before 'stays'",id
    bn$1    __endlp?id, "'wend' instruction missing"
    restart_level

*wend/0
    1mpop   "missing 'while' before 'wend'",id
    br  __beglp?id:     "'wend' must follow a 'while'"
__endlp?id:
    end_level
    4mpop "incorrect while-loop nesting",whileguard
?whileguard:
*continue/0
    1mread  id
    br  __beglp?id:     "'continue' requires a loop instruction"
    restart_level
*continue/1
    fetchms$1
    brkbeg__
    restart_level
*break/0
    1mread  "not inside loop",id
    br  __endlp?id:      "'break' requires a loop instruction"
    restart_level
*break/1
    fetchms__$1
    brkend__
    restart_level
*brkend__/0
    br  __endlp?idlp:      "'break' requires a loop instruction"
*brkbeg__/0
    br  __beglp?idlp:     "'continue' requires a loop instruction"
*fetchms__0x02/0
    1mread  "not inside loop",id,"insufficiennt depth",idlp
*fetchms__0x03/0
    1mread  "not inside loop",id,"insufficient depth",id,idlp
*fetchms__0x04/0
    1mread  "not inside loop",id,"insufficient depth",id,id,idlp
*true/0
#######################
*do/0
    4mpush  __do'
    1mpush  _'
__beglp_':
lchk __do':"incorrect 'do-until' nesting"
    start_level
*until/1
    1mpop   "missing 'do' before 'until'",id
    bn$1    __beglp?id, "'until' must follow a 'do'"
__endlp?id:
    4mpop "incorrect do-loop nesting",doguard
?doguard:
    end_level
#######################
# save/restore
*save/1
push $1
2mpush __restore'
3mpush  $1
lchk __restore':"save not followed by restore, or incorrect nesting"

*restore/0
3mpop   "restore but no prior save", reg
2mpop   "incorrect nesting",rst
?rst:   pop ?reg

*restore/1
3mpop   "restore but no prior save", reg
2mpop   "incorrect nesting",rst
?rst:   pop $1
########################
# RANDOM NUMBERS
*rannum/0
    dc  0xdf
*rannum/1
    rannum
    push    r1
    ldi r1,$1
    and r1,r0
    pop r1

########################
# launch a program
*run/1
    asect   0
    br  $1

########################
# define constants
*define/2
    asect $2
$1:

#########################
# Get/Put/ register value to/from memory address

*ldv/2 # Gets a value from memory addr ($1) to rn ($2)
      ldi $2, $1
      ld $2, $2

*stv/2 # Puts reg ($1) contents to memory addr ($2)
    unique $1, temp
    push ?temp
    ldi ?temp, $2
    st ?temp, $1
    pop ?temp

###########################
# Simulate old V3 ldsp and stsp instructions (only VN Architecture)
*ldsp/1
    ldsa $1, 0x00

*stsp/1
    unique $1, addr
    push ?addr
    ldi ?addr, stspaddr'
    st ?addr, $1
    pop ?addr
    dc 0xCD
stspaddr': dc 0x00

# Interrupt enable
*ei/0
    push r1
    ldi r1, iefin'
    push r1
    ldi r1, 0b10000000
    push r1
    rti
iefin':
    pop r1
    
# Interrupt Disable
*di/0
    push r1
    ldi r1, idfin'
    push r1
    ldi r1, 0b00000000
    push r1
    rti
idfin':
    pop r1
